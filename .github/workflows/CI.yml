name: CI

on:
  push:
    branches:
    - 'main'
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+-dev'
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+-dev'
  pull_request:
    branches:
    - 'main'
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+-dev'
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+-dev'

env:
  RUST_BACKTRACE: 1

jobs:
  shellcheck:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Run shellcheck
        run: |
          sudo apt-get update -y
          sudo apt-get install shellcheck
          ./shellcheck.sh
  style:
    name: Verify formatting and style
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Verify code formatting
        run: cargo fmt -- --check
      - name: Verify code style
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build and run tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: cargo build --verbose --all-features
      - name: Docs
        run: cargo rustdoc --lib --examples
      - name: Run tests
        run: cargo test --verbose --all-features

  linux:
    strategy:
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-18.04', 'ubuntu-16.04']
        env_vars:
          - ''
          # allow for some parallelity without GNU parallel, since it is not installed by default
          - 'BATS_NO_PARALLELIZE_ACROSS_FILES=1 BATS_NUMBER_OF_PARALLEL_JOBS=2'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Run test on OS ${{ matrix.os }}
        shell: 'script -q -e -c "bash {0}"' # work around tty issues
        env:
          TERM: linux # fix for tty issue work around
        run: |
          bash --version
          bash -c "time ${{ matrix.env_vars }} tests/support/bats-core/bin/bats --formatter tap tests"

  deploy:
    name: Build and deploy book
    runs-on: ubuntu-latest
    needs: [style, build, linux]

    steps:
      - uses: actions/checkout@v2
      - name: Setup mdbook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: "0.4.10"
      - name: Build and test Swanling book
        run: mdbook build book
      - name: Deploy Swanling book
        uses: peaceiris/actions-gh-pages@v3.8.0
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./book/html
          publish_branch: gh-pages
